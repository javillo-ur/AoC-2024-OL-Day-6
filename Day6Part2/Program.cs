Console.WriteLine(new List<Dictionary<(int,int),int>>(){File.ReadAllLines("input.txt").SelectMany((row, irow) => row.Select((col, icol) => (irow, icol, col))).Select(c => (c.irow, c.icol, (c.col == '#') ? -1 : ((c.col == '^') ? 1 : ((c.col == '<') ? 2 : ((c.col == 'v') ? 3 : ((c.col == '>') ? 4 : 0)))))).ToDictionary(x => (x.irow, x.icol), x => x.Item3)}.Select(mat => (mat, mat.Keys.First(key => mat[key] > 0), mat.Keys.Max(key => key.Item1), mat.Keys.Max(key => key.Item2))).Select(matprev => Enumerable.Range(0, matprev.Item3+1).SelectMany(rowobs => Enumerable.Range(0, matprev.Item4+1).AsParallel().Where(colobs => matprev.mat[(rowobs,colobs)] == 0).Where(colobs => new List<(Dictionary<(int,int),int>,(int,int),int,int)>(){(System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(matprev.mat).Remove((rowobs,colobs)).Add((rowobs,colobs),-1).ToDictionary(), matprev.Item2, matprev.Item3, matprev.Item4)}.All(mat => new List<((System.Collections.Immutable.ImmutableDictionary<(int, int), int>, (int, int)), (Dictionary<(int, int), int>, (int, int), int, int))>(){(Enumerable.Range(0, 4 * (mat.Item3 + 1) * (mat.Item4 + 1)).Aggregate((System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary(mat.Item1), mat.Item2), (act, it) => mat.Item1.ContainsKey(act.Item2) ? (act.Item1[act.Item2] == 1 ? ((act.Item1.ContainsKey((act.Item2.Item1-1, act.Item2.Item2)) && act.Item1[(act.Item2.Item1-1, act.Item2.Item2)] != -1) ? (act.Item1.Remove((act.Item2.Item1-1, act.Item2.Item2)).Add((act.Item2.Item1-1, act.Item2.Item2), 1).Remove(act.Item2).Add(act.Item2, 5), (act.Item2.Item1-1, act.Item2.Item2)) : (mat.Item1.ContainsKey((act.Item2.Item1-1, act.Item2.Item2)) ? (act.Item1.Remove(act.Item2).Add(act.Item2, 4), act.Item2) : (act.Item1.Remove(act.Item2).Add(act.Item2, 5), (act.Item2.Item1-1, act.Item2.Item2)))) : ((act.Item1[act.Item2] == 2) ? ((act.Item1.ContainsKey((act.Item2.Item1, act.Item2.Item2-1)) && act.Item1[(act.Item2.Item1, act.Item2.Item2-1)] != -1) ? (act.Item1.Remove((act.Item2.Item1, act.Item2.Item2-1)).Add((act.Item2.Item1, act.Item2.Item2-1), 2).Remove(act.Item2).Add(act.Item2, 5), (act.Item2.Item1, act.Item2.Item2-1)) : (mat.Item1.ContainsKey((act.Item2.Item1, act.Item2.Item2-1)) ? (act.Item1.Remove(act.Item2).Add(act.Item2, 1), act.Item2) : (act.Item1.Remove(act.Item2).Add(act.Item2, 5), (act.Item2.Item1, act.Item2.Item2-1)))) : ((act.Item1[act.Item2] == 3) ? ((act.Item1.ContainsKey((act.Item2.Item1+1, act.Item2.Item2)) && act.Item1[(act.Item2.Item1+1, act.Item2.Item2)] != -1) ? (act.Item1.Remove((act.Item2.Item1+1, act.Item2.Item2)).Add((act.Item2.Item1+1, act.Item2.Item2), 3).Remove(act.Item2).Add(act.Item2, 5), (act.Item2.Item1+1, act.Item2.Item2)) : (mat.Item1.ContainsKey((act.Item2.Item1+1, act.Item2.Item2)) ? (act.Item1.Remove(act.Item2).Add(act.Item2, 2), act.Item2) : (act.Item1.Remove(act.Item2).Add(act.Item2, 5), (act.Item2.Item1+1, act.Item2.Item2)))) : ((act.Item1.ContainsKey((act.Item2.Item1, act.Item2.Item2+1)) && act.Item1[(act.Item2.Item1, act.Item2.Item2+1)] != -1) ? (act.Item1.Remove((act.Item2.Item1, act.Item2.Item2+1)).Add((act.Item2.Item1, act.Item2.Item2+1), 4).Remove(act.Item2).Add(act.Item2, 5), (act.Item2.Item1, act.Item2.Item2+1)) : (mat.Item1.ContainsKey((act.Item2.Item1, act.Item2.Item2+1)) ? (act.Item1.Remove(act.Item2).Add(act.Item2, 3), act.Item2) : (act.Item1.Remove(act.Item2).Add(act.Item2, 5), (act.Item2.Item1, act.Item2.Item2+1))))))) : act), mat)}.All(mat => mat.Item1.Item1.ContainsKey(mat.Item1.Item2))))).Count()).Sum());